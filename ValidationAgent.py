# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

import os
from semantic_kernel.functions import kernel_function
from dotenv import load_dotenv
from azure.ai.projects import AIProjectClient
from azure.ai.agents.models import AzureAISearchTool, MessageRole, ListSortOrder
from azure.identity import DefaultAzureCredential

load_dotenv()

class ValidationAgent:
    """
    A class to represent the Validation Agent.
    """
    @kernel_function(description='An agent that runs validation checks to ensure the generated report meets requirements.')
    def validate_report(self, report:str) -> str:
        """
        Creates an Azure AI Agent that validates that the report generated by the Report Agent meets requirements.
        Coverage Exlusion Requirement: The report must include information about coverage exclusions.

        Parameters:
        report (str): The report generated by the Report Agent.

        Returns:
        last_msg (json): The last message from the agent, which contains the validation results.

        """
        print("Calling ValidationAgent...")

        # Connecting to our Azure AI Foundry project, which will allow us to use the deployed gpt-4o model for our agent
        project_client = AIProjectClient(
            os.environ["AIPROJECT_ENDPOINT"],
            DefaultAzureCredential()            
            )

        # Create an agent that will be used to validate that the generated report meets requirements
        validation_agent = project_client.agents.create_agent(
            model=os.environ["CHAT_MODEL"],
            name="validation-agent",
            instructions="You are a helpful agent that is an expert at validating that reports meet requirements. Return 'Pass' if the report meets requirement or 'Fail' if it does not meet requirements. You must only return 'Pass' or 'Fail'.", # System prompt for the agent
        ) 

        # Create a thread which is a conversation session between an agent and a user. 
        thread = project_client.agents.threads.create()

        # Create a message in the thread with the user asking for the agent to validate that the generated report includes information about coverage exclusions
        message = project_client.agents.messages.create(
            thread_id=thread.id,
            role="user",
            content=f"Validate that the generated report includes information about coverage exclusions. Here is the generated report: {report}", # The user's message
        )
        # Run the agent to process tne message in the thread
        run = project_client.agents.runs.create_and_process(thread_id=thread.id, agent_id=validation_agent.id)

        # Check if the run was successful
        if run.status == "failed":
            print(f"Run failed: {run.last_error}")

        # Delete the agent when it's done running
        project_client.agents.delete_agent(validation_agent.id)

        # Get the last message from the thread
        last_msg = project_client.agents.messages.get_last_message_text_by_role(thread_id=thread.id,role=MessageRole.AGENT)
      
        print("Validation agent completed successfully.")

        return str(last_msg)
